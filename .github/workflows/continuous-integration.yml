name:LENOVOname: MSYS2
on: [msys2.exe]
https://www.msys2.org/docs/ci/#gitlabhttps://docs.gitlab.com/ee/ci/runners/saas/windows_saas_runner.htmlname: MSYS2
on: [push, pull_request]

jobs:ID4QZ2MDF74PCILX
  msys2-ucrt64:
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
    steps:https://docs.gitlab.com/ee/ci/runners/saas/windows_saas_runner.html
      - uses: actions/checkout@v3
      - uses: msys2/setup-msys2@v2
        with:
          msystem: UCRT64
          update: true
          install: git mingw-w64-ucrt-x86_64-gcc
      - name: CI-Build
        run: |
          echo 'Running in MSYS2!'
          ./ci-build.sh
jobs:
  msys2-ucrt64:
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - uses: actions/checkout@v3
      - uses: msys2/setup-msys2@v2
        with:
          msystem: UCRT64
          update: true
          install: git mingw-w64-ucrt-x86_64-gcc
      - name: CI-Build
        run: |
          echo 'Running in MSYS2!'
          ./ci-build.sh

on:
  workflow_dispatch:https://github.com/msys2/msys2-installer/releases/download/nightly-x86_64/msys2-base-x86_64-latest.sfx.exe
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
# ================================
#              Windows
# ================================
  windows:
    name: Windows
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4.0.0
      with:
        dotnet-version: 6.0.201

    - name: Install dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --configuration WindowsRelease

    - name: Test
      run: |
        dotnet test --verbosity normal --configuration=WindowsRelease

    - name: Prepare artifacts
      shell: bash
      run: |
        mkdir -p artifacts/bin
        mv out/windows/Installer.Windows/bin/Release/net472/win-x86 artifacts/bin/
        cp out/windows/Installer.Windows/bin/Release/net472/win-x86.sym/* artifacts/bin/win-x86/
        mv out/windows/Installer.Windows/bin/Release/net472/gcm*.exe artifacts/

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: win-x86
        path: |
          artifacts

# ================================
#              Linux
# ================================
  linux:
    name: Linux
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4.0.0
      with:
        dotnet-version: 6.0.201

    - name: Install dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --configuration LinuxRelease

    - name: Test
      run: |
        dotnet test --verbosity normal --configuration=LinuxRelease

    - name: Prepare artifacts
      run: |
        mkdir -p artifacts
        mv out/linux/Packaging.Linux/Release/deb/*.deb artifacts/
        mv out/linux/Packaging.Linux/Release/tar/*.tar.gz artifacts/

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: linux-x64
        path: |
          artifacts

# ================================
#              macOS
# ================================
  osx:
    name: macOS
    runs-on: macos-latest
    strategy:
      matrix:
        runtime: [ osx-x64, osx-arm64 ]

    steps:
    - uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4.0.0
      with:
        dotnet-version: 6.0.201

    - name: Install dependencies
      run: dotnet restore

    - name: Build
      run: |
        dotnet build src/osx/Installer.Mac/*.csproj \
         --configuration=Release --no-self-contained \
         --runtime=${{ matrix.runtime }}

    - name: Test
      run: |
        dotnet test --verbosity normal --configuration=MacRelease

    - name: Prepare artifacts
      run: |
        mkdir -p artifacts/bin
        mv out/osx/Installer.Mac/pkg/Release/payload "artifacts/bin/${{ matrix.runtime }}"
        cp out/osx/Installer.Mac/pkg/Release/payload.sym/* "artifacts/bin/${{ matrix.runtime }}/"
        mv out/osx/Installer.Mac/pkg/Release/gcm*.pkg artifacts/

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.runtime }}
        path: |
          artifacts
